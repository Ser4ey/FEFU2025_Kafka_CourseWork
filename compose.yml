services:
  kafka:
    image: 'bitnami/kafka:latest'
    ports:
      - '9094:9094'
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_CONTROLLER_BROKER_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER

#  kafka-ui:
#    image: 'provectuslabs/kafka-ui:latest'
#    ports:
#      - '8082:8080'
#    depends_on:
#      - kafka
#    environment:
#      - DYNAMIC_CONFIG_ENABLED: true
#      - KAFKA_CLUSTERS_0_NAME=local
#      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092




#services:
#  postgresql:
#    image: postgres:16
#    ports:
#      - "5432:5432"
#    environment:
#      POSTGRES_DB: scrapper
#      POSTGRES_USER: postgres
#      POSTGRES_PASSWORD: postgres
#    volumes:
#      - postgresql:/var/lib/postgresql/data
#    networks:
#      - backend
#
#  liquibase-migrations:
#    image: liquibase/liquibase:4.25
#    depends_on:
#      - postgresql
#    command:
#      - --changelog-file=master.xml
#      - --driver=org.postgresql.Driver
#      - --url=jdbc:postgresql://postgresql:5432/scrapper
#      - --username=postgres
#      - --password=postgres
#      - update
#    volumes:
#      - ./migrations:/liquibase/changelog
#    networks:
#      - backend
#
#  zoo1:
#    image: confluentinc/cp-zookeeper:7.3.2
#    hostname: zoo1
#    container_name: zoo1
#    ports:
#      - "2181:2181"
#    environment:
#      ZOOKEEPER_CLIENT_PORT: 2181
#      ZOOKEEPER_SERVER_ID: 1
#      ZOOKEEPER_SERVERS: zoo1:2888:3888
#
#  kafka1:
#    image: confluentinc/cp-kafka:7.3.2
#    hostname: kafka1
#    container_name: kafka1
#    ports:
#      - "9092:9092"
#      - "29092:29092"
#      - "9999:9999"
#    volumes:
#      - kafka_data:/var/lib/kafka
#      - kafka_data:/etc/kafka
#    environment:
#      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
#      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
#      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
#      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
#      KAFKA_BROKER_ID: 1
#      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
#      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
#      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
#      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
#      KAFKA_JMX_PORT: 9999
#      KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
#      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
#      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
#    depends_on:
#      - zoo1
#
#  prometheus:
#    image: prom/prometheus
#    volumes:
#      - ./prometheus.yml:/etc/prometheus/prometheus.yml
#    ports:
#      - 9090:9090
#
#  grafana:
#    image: grafana/grafana-oss
#    ports:
#      - 3000:3000
#    depends_on:
#      - prometheus
#
#volumes:
#  postgresql: { }
#  kafka_data: { }
#
#networks:
#  backend: { }
